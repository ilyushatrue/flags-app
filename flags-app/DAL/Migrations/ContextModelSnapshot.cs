// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("DAL.Models.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Catalog");
                });

            modelBuilder.Entity("DAL.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CapitalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DAL.Models.Flags.Attributes.FlagArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlagId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("FlagId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("FlagAreas");
                });

            modelBuilder.Entity("DAL.Models.Flags.Attributes.FlagPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ColorId");

                    b.HasIndex("NameId");

                    b.ToTable("FlagPatterns");
                });

            modelBuilder.Entity("DAL.Models.Flags.Flag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Flags");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Flag");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DAL.Models.Flags.PlainFlag", b =>
                {
                    b.HasBaseType("DAL.Models.Flags.Flag");

                    b.HasDiscriminator().HasValue("PlainFlag");
                });

            modelBuilder.Entity("DAL.Models.Flags.StripedFlag", b =>
                {
                    b.HasBaseType("DAL.Models.Flags.Flag");

                    b.Property<int>("StripColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StripDirectionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("StripColorId");

                    b.HasIndex("StripDirectionId");

                    b.HasDiscriminator().HasValue("StripedFlag");
                });

            modelBuilder.Entity("DAL.Models.Flags.Attributes.FlagArea", b =>
                {
                    b.HasOne("DAL.Models.CatalogItem", "Color")
                        .WithMany("FlagAreaColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Flags.Flag", "Flag")
                        .WithOne("Area")
                        .HasForeignKey("DAL.Models.Flags.Attributes.FlagArea", "FlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Flags.Attributes.FlagArea", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Color");

                    b.Navigation("Flag");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DAL.Models.Flags.Attributes.FlagPattern", b =>
                {
                    b.HasOne("DAL.Models.Flags.Attributes.FlagArea", "Area")
                        .WithMany("Patterns")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.CatalogItem", "Color")
                        .WithMany("FlagPatternColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.CatalogItem", "Name")
                        .WithMany("FlagPatternNames")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Color");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("DAL.Models.Flags.Flag", b =>
                {
                    b.HasOne("DAL.Models.Country", "Country")
                        .WithOne("Flag")
                        .HasForeignKey("DAL.Models.Flags.Flag", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DAL.Models.Flags.StripedFlag", b =>
                {
                    b.HasOne("DAL.Models.CatalogItem", "StripColor")
                        .WithMany()
                        .HasForeignKey("StripColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.CatalogItem", "StripDirection")
                        .WithMany()
                        .HasForeignKey("StripDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StripColor");

                    b.Navigation("StripDirection");
                });

            modelBuilder.Entity("DAL.Models.CatalogItem", b =>
                {
                    b.Navigation("FlagAreaColors");

                    b.Navigation("FlagPatternColors");

                    b.Navigation("FlagPatternNames");
                });

            modelBuilder.Entity("DAL.Models.Country", b =>
                {
                    b.Navigation("Flag")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Flags.Attributes.FlagArea", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Patterns");
                });

            modelBuilder.Entity("DAL.Models.Flags.Flag", b =>
                {
                    b.Navigation("Area")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
